
LED_KEY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000306  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000037  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012b  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c6  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ca  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015a  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005a  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  10:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  14:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  18:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  1c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  20:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  28:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  2c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  30:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  38:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  3c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  40:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  4c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  50:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  54:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  58:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  5c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  64:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  68:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  6c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  70:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  74:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  78:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  7c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  80:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  84:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  8c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  90:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  94:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  98:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  9c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  fc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 100:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 104:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 108:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 10c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 110:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 114:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 118:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 11c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 120:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 124:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 128:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 12c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 130:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 134:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 138:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 13c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 140:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 144:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 148:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 14c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 150:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 154:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 158:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 15c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 160:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 164:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 168:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 16c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 170:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 174:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 178:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 17c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 180:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 184:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 188:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 18c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 190:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 194:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 198:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 19c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 e0       	ldi	r30, 0x06	; 6
 214:	f3 e0       	ldi	r31, 0x03	; 3
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59
 228:	0e 94 49 01 	call	0x292	; 0x292 <main>
 22c:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

00000230 <__bad_interrupt>:
 230:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000234 <KEY_initial>:
| Description : 设置按键引脚为上拉
+------------------------------------------------------------------------------
*/
void KEY_initial(void)
{
	PORTE_DIRCLR = 0x1F;//设置按键引脚为输入
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	80 93 82 06 	sts	0x0682, r24
	PORTE_PIN2CTRL = PORT_OPC_PULLUP_gc;
	PORTE_PIN3CTRL = PORT_OPC_PULLUP_gc;
	PORTE_PIN4CTRL = PORT_OPC_PULLUP_gc;
	*/
	//当有多个引脚的配置相同时，可以使用多引脚配置掩码寄存器一次配置多个引脚
	PORTCFG_MPCMASK = 0X1F;
 23a:	80 93 b0 00 	sts	0x00B0, r24
	PORTE_PIN0CTRL = PORT_OPC_PULLUP_gc;
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	80 93 90 06 	sts	0x0690, r24
}
 244:	08 95       	ret

00000246 <Get_Key>:
+------------------------------------------------------------------------------
*/
unsigned char Get_Key(void)
{
	unsigned char Key=0,num_keypress = 0;
	if((PORTE_IN&(1<<1))==0)
 246:	80 91 88 06 	lds	r24, 0x0688
 24a:	81 fd       	sbrc	r24, 1
 24c:	03 c0       	rjmp	.+6      	; 0x254 <Get_Key+0xe>
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	02 c0       	rjmp	.+4      	; 0x258 <Get_Key+0x12>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
		{
			Key|=SELECT;
			num_keypress++;
			}
	if((PORTE_IN&(1<<0))==0)
 258:	80 91 88 06 	lds	r24, 0x0688
 25c:	80 fd       	sbrc	r24, 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Get_Key+0x1e>
		{
			Key|=LEFT;
 260:	22 60       	ori	r18, 0x02	; 2
			num_keypress++;
 262:	9f 5f       	subi	r25, 0xFF	; 255
			}
	if((PORTE_IN&(1<<4))==0)
 264:	80 91 88 06 	lds	r24, 0x0688
 268:	84 fd       	sbrc	r24, 4
 26a:	02 c0       	rjmp	.+4      	; 0x270 <Get_Key+0x2a>
		{
			Key|=RIGHT;
 26c:	24 60       	ori	r18, 0x04	; 4
			num_keypress++;
 26e:	9f 5f       	subi	r25, 0xFF	; 255
			}
	if((PORTE_IN&(1<<2))==0)
 270:	80 91 88 06 	lds	r24, 0x0688
 274:	82 fd       	sbrc	r24, 2
 276:	02 c0       	rjmp	.+4      	; 0x27c <Get_Key+0x36>
		{
			Key|=UP;
 278:	28 60       	ori	r18, 0x08	; 8
			num_keypress++;
 27a:	9f 5f       	subi	r25, 0xFF	; 255
			}
	if((PORTE_IN&(1<<3))==0)
 27c:	80 91 88 06 	lds	r24, 0x0688
 280:	83 fd       	sbrc	r24, 3
 282:	02 c0       	rjmp	.+4      	; 0x288 <Get_Key+0x42>
		{
			Key|=DOWN;
 284:	20 61       	ori	r18, 0x10	; 16
			num_keypress++;
 286:	9f 5f       	subi	r25, 0xFF	; 255
			}
	if(num_keypress>1)
 288:	92 30       	cpi	r25, 0x02	; 2
 28a:	08 f0       	brcs	.+2      	; 0x28e <Get_Key+0x48>
 28c:	20 e0       	ldi	r18, 0x00	; 0
		Key=No_key;
	return Key;
}
 28e:	82 2f       	mov	r24, r18
 290:	08 95       	ret

00000292 <main>:
+------------------------------------------------------------------------------
| Description : 根据按键对LED灯操作
+------------------------------------------------------------------------------
*/
int main(void)
{	
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
	unsigned char Key_return = 0;
	PORTD_DIRSET = 0x30;//PD5，PD4方向设为输出
 296:	80 e3       	ldi	r24, 0x30	; 48
 298:	80 93 61 06 	sts	0x0661, r24
	LED1_ON(); 
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	80 93 66 06 	sts	0x0666, r24
	LED2_ON(); 
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	80 93 66 06 	sts	0x0666, r24
| Description : 设置按键引脚为上拉
+------------------------------------------------------------------------------
*/
void KEY_initial(void)
{
	PORTE_DIRCLR = 0x1F;//设置按键引脚为输入
 2a8:	8f e1       	ldi	r24, 0x1F	; 31
 2aa:	80 93 82 06 	sts	0x0682, r24
	PORTE_PIN2CTRL = PORT_OPC_PULLUP_gc;
	PORTE_PIN3CTRL = PORT_OPC_PULLUP_gc;
	PORTE_PIN4CTRL = PORT_OPC_PULLUP_gc;
	*/
	//当有多个引脚的配置相同时，可以使用多引脚配置掩码寄存器一次配置多个引脚
	PORTCFG_MPCMASK = 0X1F;
 2ae:	80 93 b0 00 	sts	0x00B0, r24
	PORTE_PIN0CTRL = PORT_OPC_PULLUP_gc;
 2b2:	88 e1       	ldi	r24, 0x18	; 24
 2b4:	80 93 90 06 	sts	0x0690, r24
					break;  
				case LEFT  : 
					LED1_ON();
					break;
				case RIGHT : 
					LED1_OFF();
 2b8:	10 e2       	ldi	r17, 0x20	; 32
					break;
				case UP    : 
					LED2_ON();
 2ba:	00 e1       	ldi	r16, 0x10	; 16
	LED1_ON(); 
	LED2_ON(); 
	KEY_initial();//初始化按键引脚
	while(1)
	{
		Key_return = Get_Key(); 
 2bc:	0e 94 23 01 	call	0x246	; 0x246 <Get_Key>
		if(Key_return)
 2c0:	88 23       	and	r24, r24
 2c2:	e1 f3       	breq	.-8      	; 0x2bc <main+0x2a>
		{
			switch(Key_return)
 2c4:	84 30       	cpi	r24, 0x04	; 4
 2c6:	a1 f0       	breq	.+40     	; 0x2f0 <main+0x5e>
 2c8:	85 30       	cpi	r24, 0x05	; 5
 2ca:	28 f4       	brcc	.+10     	; 0x2d6 <main+0x44>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <main+0x4e>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	a1 f7       	brne	.-24     	; 0x2bc <main+0x2a>
 2d4:	0a c0       	rjmp	.+20     	; 0x2ea <main+0x58>
 2d6:	88 30       	cpi	r24, 0x08	; 8
 2d8:	71 f0       	breq	.+28     	; 0x2f6 <main+0x64>
 2da:	80 31       	cpi	r24, 0x10	; 16
 2dc:	79 f7       	brne	.-34     	; 0x2bc <main+0x2a>
 2de:	0e c0       	rjmp	.+28     	; 0x2fc <main+0x6a>
			{
				case SELECT: 
					LED1_T();
 2e0:	10 93 67 06 	sts	0x0667, r17
					LED2_T();
 2e4:	00 93 67 06 	sts	0x0667, r16
 2e8:	e9 cf       	rjmp	.-46     	; 0x2bc <main+0x2a>
					break;  
				case LEFT  : 
					LED1_ON();
 2ea:	10 93 66 06 	sts	0x0666, r17
 2ee:	e6 cf       	rjmp	.-52     	; 0x2bc <main+0x2a>
					break;
				case RIGHT : 
					LED1_OFF();
 2f0:	10 93 65 06 	sts	0x0665, r17
 2f4:	e3 cf       	rjmp	.-58     	; 0x2bc <main+0x2a>
					break;
				case UP    : 
					LED2_ON();
 2f6:	00 93 66 06 	sts	0x0666, r16
 2fa:	e0 cf       	rjmp	.-64     	; 0x2bc <main+0x2a>
					break;
				case DOWN  : 
					LED2_OFF();
 2fc:	80 93 65 06 	sts	0x0665, r24
 300:	dd cf       	rjmp	.-70     	; 0x2bc <main+0x2a>

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
