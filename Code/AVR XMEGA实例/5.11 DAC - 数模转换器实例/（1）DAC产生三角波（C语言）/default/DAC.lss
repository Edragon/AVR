
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000344  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000009b  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000070b  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000209  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000260  00000000  00000000  00000d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000005f1  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000e6  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  0000170f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
   c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  10:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  14:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  18:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  1c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  20:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  28:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  2c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  30:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  34:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  38:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  3c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  40:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  44:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  48:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  4c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  50:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  54:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  58:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  5c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  60:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  64:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  68:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  6c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  70:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  74:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  78:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  7c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  80:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  84:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  88:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  8c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  90:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  94:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  98:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  9c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  f8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
  fc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 100:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 104:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 108:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 10c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 110:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 114:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 118:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 11c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 120:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 124:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 128:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 12c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 130:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 134:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 138:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 13c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 140:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 144:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 148:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 14c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 150:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 154:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 158:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 15c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 160:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 164:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 168:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 16c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 170:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 174:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 178:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 17c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 180:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 184:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 188:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 18c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 190:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 194:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 198:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 19c:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1a8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ac:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1b8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1bc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1c8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1cc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1d8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1dc:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e4:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1e8:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1ec:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>
 1f0:	0c 94 18 01 	jmp	0x230	; 0x230 <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e4 e4       	ldi	r30, 0x44	; 68
 214:	f3 e0       	ldi	r31, 0x03	; 3
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59
 228:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
 22c:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

00000230 <__bad_interrupt>:
 230:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000234 <DAC_SingleChannel_Enable>:
 *  \参数  leftAdjust  为真时，左对齐
 */
void DAC_SingleChannel_Enable( volatile DAC_t * dac,
                              DAC_REFSEL_t convRef,
                              bool leftAdjust )
{
 234:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_SINGLE_gc;
 236:	81 81       	ldd	r24, Z+1	; 0x01
 238:	8f 79       	andi	r24, 0x9F	; 159
 23a:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~(DAC_REFSEL_gm | DAC_LEFTADJ_bm) ) |
 23c:	82 81       	ldd	r24, Z+2	; 0x02
 23e:	86 7e       	andi	r24, 0xE6	; 230
 240:	68 2b       	or	r22, r24
 242:	64 2b       	or	r22, r20
 244:	62 83       	std	Z+2, r22	; 0x02
	             convRef | ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->CTRLA = ( dac->CTRLA & ~DAC_CH1EN_bm ) |
 246:	80 81       	ld	r24, Z
 248:	82 7f       	andi	r24, 0xF2	; 242
 24a:	85 60       	ori	r24, 0x05	; 5
 24c:	80 83       	st	Z, r24
	             DAC_CH0EN_bm | DAC_ENABLE_bm;
}
 24e:	08 95       	ret

00000250 <DAC_DualChannel_Enable>:
void DAC_DualChannel_Enable( volatile DAC_t * dac,
                            DAC_REFSEL_t convRef,
                            bool leftAdjust,
                            DAC_CONINTVAL_t sampleInterval,
                            DAC_REFRESH_t refreshInterval )
{
 250:	0f 93       	push	r16
 252:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_CHSEL_gm ) | DAC_CHSEL_DUAL_gc;
 254:	81 81       	ldd	r24, Z+1	; 0x01
 256:	8f 79       	andi	r24, 0x9F	; 159
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	81 83       	std	Z+1, r24	; 0x01
	dac->CTRLC = ( dac->CTRLC & ~( DAC_REFSEL_gm | DAC_LEFTADJ_bm ) ) |
 25c:	82 81       	ldd	r24, Z+2	; 0x02
 25e:	86 7e       	andi	r24, 0xE6	; 230
 260:	68 2b       	or	r22, r24
 262:	64 2b       	or	r22, r20
 264:	62 83       	std	Z+2, r22	; 0x02
	             convRef |
	             ( leftAdjust ? DAC_LEFTADJ_bm : 0x00 );
	dac->TIMCTRL = (uint8_t) sampleInterval | refreshInterval;
 266:	02 2b       	or	r16, r18
 268:	04 83       	std	Z+4, r16	; 0x04
	dac->CTRLA |= DAC_CH1EN_bm | DAC_CH0EN_bm | DAC_ENABLE_bm;
 26a:	80 81       	ld	r24, Z
 26c:	8d 60       	ori	r24, 0x0D	; 13
 26e:	80 83       	st	Z, r24
}
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <DAC_Channel_Write>:
 *  \参数  dac     DAC模块寄存器区指针
 *  \参数  data    要转换的数据
 *  \参数  channel CH0 或 CH1
 */
void DAC_Channel_Write( volatile DAC_t * dac, uint16_t data, DAC_CH_t channel )
{
 274:	fc 01       	movw	r30, r24
	if ( channel == CH0 )
 276:	44 23       	and	r20, r20
 278:	19 f4       	brne	.+6      	; 0x280 <DAC_Channel_Write+0xc>
	{
		dac->CH0DATA = data;
 27a:	60 8f       	std	Z+24, r22	; 0x18
 27c:	71 8f       	std	Z+25, r23	; 0x19
 27e:	08 95       	ret
	}
	else
	{
		dac->CH1DATA = data;
 280:	62 8f       	std	Z+26, r22	; 0x1a
 282:	73 8f       	std	Z+27, r23	; 0x1b
 284:	08 95       	ret

00000286 <DAC_Channel_DataEmpty>:
 *
 *  \retval dac状态 真-空
 *  \retval dac状态 假-非空
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
 286:	fc 01       	movw	r30, r24
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
 288:	85 81       	ldd	r24, Z+5	; 0x05
 28a:	66 23       	and	r22, r22
 28c:	19 f4       	brne	.+6      	; 0x294 <DAC_Channel_DataEmpty+0xe>
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DAC_Channel_DataEmpty+0x12>
 294:	22 e0       	ldi	r18, 0x02	; 2
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	28 23       	and	r18, r24
 29e:	39 23       	and	r19, r25
 2a0:	23 2b       	or	r18, r19
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <DAC_Channel_DataEmpty+0x20>
 2a4:	41 e0       	ldi	r20, 0x01	; 1
	return dacStatus;
}
 2a6:	84 2f       	mov	r24, r20
 2a8:	08 95       	ret

000002aa <DAC_EventAction_Set>:
 *  \参数  eventLine   事件通道(0..7)
 */
void DAC_EventAction_Set( volatile DAC_t * dac,
                          DAC_TRIG_t trigChannel,
                          uint8_t eventLine )
{
 2aa:	fc 01       	movw	r30, r24
	dac->CTRLB = ( dac->CTRLB & ~DAC_TRIG_1_1 ) | trigChannel;
 2ac:	81 81       	ldd	r24, Z+1	; 0x01
 2ae:	8c 7f       	andi	r24, 0xFC	; 252
 2b0:	86 2b       	or	r24, r22
 2b2:	81 83       	std	Z+1, r24	; 0x01
	dac->EVCTRL = eventLine & DAC_EVSEL_gm;
 2b4:	47 70       	andi	r20, 0x07	; 7
 2b6:	43 83       	std	Z+3, r20	; 0x03
}
 2b8:	08 95       	ret

000002ba <main>:
+------------------------------------------------------------------------------
| Function    : main
+------------------------------------------------------------------------------
*/
int main( void )
{ 
 2ba:	0f 93       	push	r16
	uint16_t angle;

	DAC_DualChannel_Enable( &DACB,//端口B
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	93 e0       	ldi	r25, 0x03	; 3
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	20 e2       	ldi	r18, 0x20	; 32
 2c6:	01 e0       	ldi	r16, 0x01	; 1
 2c8:	0e 94 28 01 	call	0x250	; 0x250 <DAC_DualChannel_Enable>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 *  \retval dac状态 假-非空
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
 2d0:	a0 e2       	ldi	r26, 0x20	; 32
 2d2:	b3 e0       	ldi	r27, 0x03	; 3
 2d4:	e0 e2       	ldi	r30, 0x20	; 32
 2d6:	f3 e0       	ldi	r31, 0x03	; 3
			DAC_Channel_Write( &DACB, angle, CH0 );

			while ( DAC_Channel_DataEmpty( &DACB, CH1 ) == false )
			{
			}
			DAC_Channel_Write( &DACB, 0xFFF - angle, CH1 );
 2d8:	4f ef       	ldi	r20, 0xFF	; 255
 2da:	5f e0       	ldi	r21, 0x0F	; 15
 2dc:	11 c0       	rjmp	.+34     	; 0x300 <main+0x46>
 2de:	80 91 25 03 	lds	r24, 0x0325

	while (1)
	{
		for ( angle = 0; angle < 0x1000; ++angle )
		{
			while ( DAC_Channel_DataEmpty( &DACB, CH0 ) == false )
 2e2:	80 ff       	sbrs	r24, 0
 2e4:	fc cf       	rjmp	.-8      	; 0x2de <main+0x24>
 */
void DAC_Channel_Write( volatile DAC_t * dac, uint16_t data, DAC_CH_t channel )
{
	if ( channel == CH0 )
	{
		dac->CH0DATA = data;
 2e6:	20 8f       	std	Z+24, r18	; 0x18
 2e8:	31 8f       	std	Z+25, r19	; 0x19
 *  \retval dac状态 假-非空
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
 2ea:	80 91 25 03 	lds	r24, 0x0325
			{
			}
			DAC_Channel_Write( &DACB, angle, CH0 );

			while ( DAC_Channel_DataEmpty( &DACB, CH1 ) == false )
 2ee:	81 ff       	sbrs	r24, 1
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <main+0x30>
			{
			}
			DAC_Channel_Write( &DACB, 0xFFF - angle, CH1 );
 2f2:	ca 01       	movw	r24, r20
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
	{
		dac->CH0DATA = data;
	}
	else
	{
		dac->CH1DATA = data;
 2f8:	82 8f       	std	Z+26, r24	; 0x1a
 2fa:	93 8f       	std	Z+27, r25	; 0x1b
	                        DAC_CONINTVAL_4CLK_gc,// 4 CLK / 6 CLK  S/H 
	                        DAC_REFRESH_32CLK_gc );//刷新率

	while (1)
	{
		for ( angle = 0; angle < 0x1000; ++angle )
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	20 30       	cpi	r18, 0x00	; 0
 304:	38 07       	cpc	r19, r24
 306:	58 f3       	brcs	.-42     	; 0x2de <main+0x24>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 *  \retval dac状态 假-非空
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
 30c:	80 91 25 03 	lds	r24, 0x0325
			DAC_Channel_Write( &DACB, 0xFFF - angle, CH1 );
		}

		for ( angle = 0; angle < 0x1000; ++angle )
		{
			while ( DAC_Channel_DataEmpty( &DACB, CH0 ) == false )
 310:	80 ff       	sbrs	r24, 0
 312:	fc cf       	rjmp	.-8      	; 0x30c <main+0x52>
 314:	ca 01       	movw	r24, r20
 316:	82 1b       	sub	r24, r18
 318:	93 0b       	sbc	r25, r19
 */
void DAC_Channel_Write( volatile DAC_t * dac, uint16_t data, DAC_CH_t channel )
{
	if ( channel == CH0 )
	{
		dac->CH0DATA = data;
 31a:	58 96       	adiw	r26, 0x18	; 24
 31c:	8d 93       	st	X+, r24
 31e:	9c 93       	st	X, r25
 320:	59 97       	sbiw	r26, 0x19	; 25
 *  \retval dac状态 假-非空
 */
bool DAC_Channel_DataEmpty( volatile DAC_t * dac, DAC_CH_t channel )
{
	bool dacStatus = ( dac->STATUS &
	                 ( channel ? DAC_CH1DRE_bm : DAC_CH0DRE_bm ));
 322:	80 91 25 03 	lds	r24, 0x0325
			{
			}
			DAC_Channel_Write( &DACB, 0xFFF - angle, CH0 );

			while ( DAC_Channel_DataEmpty( &DACB, CH1 ) == false )
 326:	81 ff       	sbrs	r24, 1
 328:	fc cf       	rjmp	.-8      	; 0x322 <main+0x68>
	{
		dac->CH0DATA = data;
	}
	else
	{
		dac->CH1DATA = data;
 32a:	22 8f       	std	Z+26, r18	; 0x1a
 32c:	33 8f       	std	Z+27, r19	; 0x1b
			{
			}
			DAC_Channel_Write( &DACB, 0xFFF - angle, CH1 );
		}

		for ( angle = 0; angle < 0x1000; ++angle )
 32e:	2f 5f       	subi	r18, 0xFF	; 255
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	20 30       	cpi	r18, 0x00	; 0
 336:	38 07       	cpc	r19, r24
 338:	49 f7       	brne	.-46     	; 0x30c <main+0x52>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	e0 cf       	rjmp	.-64     	; 0x300 <main+0x46>

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
